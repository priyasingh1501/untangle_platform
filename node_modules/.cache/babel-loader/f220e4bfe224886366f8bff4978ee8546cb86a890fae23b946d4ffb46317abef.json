{"ast":null,"code":"import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MonthGrid=_ref=>{let{selectedDate,habits=[],goals=[],mindfulnessCheckins=[],tasks=[],meals=[],expenses=[],onDateSelect,onMonthChange}=_ref;// Ensure all props are arrays with fallbacks\nconst safeHabits=Array.isArray(habits)?habits:[];const safeGoals=Array.isArray(goals)?goals:[];const safeMindfulnessCheckins=Array.isArray(mindfulnessCheckins)?mindfulnessCheckins:[];const safeTasks=Array.isArray(tasks)?tasks:[];const safeMeals=Array.isArray(meals)?meals:[];const safeExpenses=Array.isArray(expenses)?expenses:[];try{// Input validation to prevent React error #137\nif(!selectedDate||!(selectedDate instanceof Date)||isNaN(selectedDate.getTime())){console.error('MonthGrid: Invalid selectedDate prop',selectedDate);return/*#__PURE__*/_jsx(\"div\",{className:\"w-full p-4 text-center text-red-500\",children:\"Error: Invalid date provided to MonthGrid component\"});}// Debug logging for data loading\nconsole.log('MonthGrid: Data received:',{habits:safeHabits.length,goals:safeGoals.length,mindfulnessCheckins:safeMindfulnessCheckins.length,tasks:safeTasks.length,meals:safeMeals.length,expenses:safeExpenses.length});console.log('🔍 MonthGrid rendered with props:');console.log('🔍 mindfulnessCheckins:',safeMindfulnessCheckins);console.log('🔍 mindfulnessCheckins.length:',safeMindfulnessCheckins.length);console.log('🔍 mindfulnessCheckins type:',typeof safeMindfulnessCheckins);console.log('🔍 Is array:',Array.isArray(safeMindfulnessCheckins));if(safeMindfulnessCheckins.length>0){console.log('🔍 First checkin:',safeMindfulnessCheckins[0]);console.log('🔍 First checkin date:',safeMindfulnessCheckins[0].date);console.log('🔍 First checkin totalScore:',safeMindfulnessCheckins[0].totalScore);}// Get the current date and calculate the start date (12 months ago)\nconst currentDate=new Date();// Validate current date\nif(isNaN(currentDate.getTime())){console.error('❌ Invalid currentDate detected');return/*#__PURE__*/_jsx(\"div\",{className:\"w-full p-4 text-center text-red-500\",children:\"Error: Invalid current date\"});}// Debug: Let's see exactly what we're working with\nconsole.log('🔍 Raw date info:');console.log('🔍 currentDate.getFullYear():',currentDate.getFullYear());console.log('🔍 currentDate.getMonth():',currentDate.getMonth());console.log('🔍 currentDate.getDate():',currentDate.getDate());console.log('🔍 Month name:',currentDate.toLocaleDateString('en-US',{month:'long'}));console.log('🔍 Showing current year from January to current month');// Calculate start date to show current year from January to current month\n// We want to show from January 1st of current year to current month\nconst startDate=new Date(currentDate.getFullYear(),0,1);// January 1st of current year\n// Validate startDate\nif(isNaN(startDate.getTime())){console.error('❌ Invalid startDate calculated:',startDate);return/*#__PURE__*/_jsx(\"div\",{className:\"w-full p-4 text-center text-red-500\",children:\"Error: Invalid start date calculation\"});}// Set end date to the last day of the current month\nconst endDate=new Date(currentDate.getFullYear(),currentDate.getMonth()+1,0);endDate.setHours(23,59,59,999);// Validate endDate\nif(isNaN(endDate.getTime())){console.error('❌ Invalid endDate calculated:',endDate);return/*#__PURE__*/_jsx(\"div\",{className:\"w-full p-4 text-center text-red-500\",children:\"Error: Invalid end date calculation\"});}console.log('🔍 Date calculations:');console.log('🔍 currentDate:',currentDate);console.log('🔍 currentDate.toISOString():',currentDate.toISOString());console.log('🔍 startDate (Jan 1st):',startDate);console.log('🔍 startDate.toISOString():',startDate.toISOString());console.log('🔍 endDate (end of current month):',endDate);console.log('🔍 endDate.toISOString():',endDate.toISOString());console.log('🔍 startDate <= endDate:',startDate<=endDate);// Debug: Let's verify the month calculation\nconsole.log('🔍 Month calculation debug:');console.log('🔍 Showing months from January to current month');console.log('🔍 Expected start month:',startDate.toLocaleDateString('en-US',{month:'long',year:'numeric'}));console.log('🔍 Expected end month:',endDate.toLocaleDateString('en-US',{month:'long',year:'numeric'}));// Get comprehensive daily score for a specific date\nconst getComprehensiveDailyScore=date=>{// Validate date input\nif(!date||!(date instanceof Date)||isNaN(date.getTime())){console.error('getComprehensiveDailyScore: Invalid date input',date);return{totalScore:0,breakdown:{mindfulness:0,goalProgress:0,habitCompletion:0,mealEffects:0,impulseBuyPenalty:0}};}const dateStr=date.toLocaleDateString('en-CA');// YYYY-MM-DD format\n// 1. Mindfulness Score (0-25 points)\nconst mindfulnessScore=getMindfulnessScoreForDate(date);// 2. Goal Progress Score (0-20 points)\nconst goalProgressScore=getGoalProgressScoreForDate(date);// 3. Habit Completion Score (0-15 points)\nconst habitCompletionScore=getHabitCompletionScoreForDate(date);// 4. Meal Effects Score (0-25 points)\nconst mealEffectsScore=getMealEffectsScoreForDate(date);// 5. Impulse Buy Penalty (0 to -10 points)\nconst impulseBuyPenalty=getImpulseBuyPenaltyForDate(date);const totalScore=Math.max(0,mindfulnessScore+goalProgressScore+habitCompletionScore+mealEffectsScore+impulseBuyPenalty);return{totalScore,breakdown:{mindfulness:mindfulnessScore,goalProgress:goalProgressScore,habitCompletion:habitCompletionScore,mealEffects:mealEffectsScore,impulseBuyPenalty:impulseBuyPenalty}};};// Get mindfulness score for a specific date (0-25 points)\nconst getMindfulnessScoreForDate=date=>{const dateStr=date.toLocaleDateString('en-CA');const checkin=safeMindfulnessCheckins.find(checkin=>{if(!checkin||!checkin.date)return false;const checkinDate=new Date(checkin.date).toLocaleDateString('en-CA');return dateStr===checkinDate;});if(!checkin)return 0;// Calculate total score from dimensions (5 dimensions × 0-5 rating each = 0-25)\nconst dimensions=checkin.dimensions||{};const totalScore=Object.values(dimensions).reduce((sum,dim)=>{return sum+(dim.rating||0);},0);return totalScore;};// Get goal progress score for a specific date (0-20 points)\nconst getGoalProgressScoreForDate=date=>{const dateStr=date.toLocaleDateString('en-CA');let score=0;// Check if any tasks for goals were completed on this date\nconst completedTasksForGoals=safeTasks.filter(task=>{if(!task.goalIds||task.goalIds.length===0)return false;if(task.status!=='completed')return false;const taskDate=new Date(task.completedAt||task.updatedAt).toLocaleDateString('en-CA');return taskDate===dateStr;});// Score based on completed tasks (up to 20 points)\nif(completedTasksForGoals.length>0){// Base score for having any goal progress\nscore+=10;// Additional points for multiple completed tasks\nif(completedTasksForGoals.length>=2)score+=5;if(completedTasksForGoals.length>=3)score+=5;}return Math.min(score,20);};// Get habit completion score for a specific date (0-15 points)\nconst getHabitCompletionScoreForDate=date=>{const dateStr=date.toLocaleDateString('en-CA');let completedCount=0;let totalCount=0;safeHabits.forEach(habit=>{if(!habit||!habit.startDate||!habit.endDate)return;const checkDate=new Date(date);checkDate.setHours(0,0,0,0);const startDate=new Date(habit.startDate);startDate.setHours(0,0,0,0);const endDate=new Date(habit.endDate);endDate.setHours(23,59,59,999);if(habit.isActive&&checkDate>=startDate&&checkDate<=endDate){var _habit$checkins;totalCount++;const checkin=(_habit$checkins=habit.checkins)===null||_habit$checkins===void 0?void 0:_habit$checkins.find(c=>{const checkinDate=new Date(c.date).toLocaleDateString('en-CA');return checkinDate===dateStr&&c.completed;});if(checkin)completedCount++;}});if(totalCount===0)return 0;const completionRate=completedCount/totalCount;return Math.round(completionRate*15);// 0-15 points based on completion rate\n};// Get meal effects score for a specific date (0-25 points)\nconst getMealEffectsScoreForDate=date=>{const dateStr=date.toLocaleDateString('en-CA');const dayMeals=safeMeals.filter(meal=>{const mealDate=new Date(meal.ts).toLocaleDateString('en-CA');return mealDate===dateStr;});if(dayMeals.length===0)return 0;let totalScore=0;let mealCount=0;dayMeals.forEach(meal=>{var _meal$computed;if(!((_meal$computed=meal.computed)!==null&&_meal$computed!==void 0&&_meal$computed.effects))return;const effects=meal.computed.effects;let mealScore=0;// Positive effects (0-5 points each)\nconst positiveEffects=['strength','antiInflammatory','immunity','gutFriendly','energizing'];positiveEffects.forEach(effect=>{var _effects$effect;if((_effects$effect=effects[effect])!==null&&_effects$effect!==void 0&&_effects$effect.score){mealScore+=Math.round(effects[effect].score/2);// Convert 0-10 to 0-5\n}});// Negative effects (penalty)\nconst negativeEffects=['inflammation','fatForming'];negativeEffects.forEach(effect=>{var _effects$effect2;if((_effects$effect2=effects[effect])!==null&&_effects$effect2!==void 0&&_effects$effect2.score){mealScore-=Math.round(effects[effect].score/2);// Convert 0-10 to 0-5 penalty\n}});totalScore+=Math.max(0,mealScore);// Don't go below 0\nmealCount++;});// Average score per meal, capped at 5 points per meal\nconst averageScore=mealCount>0?totalScore/mealCount:0;return Math.min(Math.round(averageScore*dayMeals.length),25);};// Get impulse buy penalty for a specific date (0 to -10 points)\nconst getImpulseBuyPenaltyForDate=date=>{const dateStr=date.toLocaleDateString('en-CA');// Check for expenses that were explicitly marked as impulse buys by the user\nconst dayExpenses=safeExpenses.filter(expense=>{const expenseDate=new Date(expense.date).toLocaleDateString('en-CA');return expenseDate===dateStr;});if(dayExpenses.length===0)return 0;// Only consider expenses explicitly marked as impulse buys by the user\nconst impulseExpenses=dayExpenses.filter(expense=>expense.impulseBuy===true);if(impulseExpenses.length===0)return 0;// Calculate penalty based on number and amount of impulse expenses\nlet penalty=0;impulseExpenses.forEach(expense=>{// Penalty based on amount (more expensive = more penalty)\nif(expense.amount>1000)penalty+=3;else if(expense.amount>500)penalty+=2;else if(expense.amount>100)penalty+=1;else penalty+=0.5;});return Math.min(penalty,10);// Cap at 10 points penalty\n};// Get color based on comprehensive daily score\nconst getDayColor=date=>{// Validate date input\nif(!date||!(date instanceof Date)||isNaN(date.getTime())){console.error('getDayColor: Invalid date input',date);return'#0f1419';// Default dark color for invalid dates\n}const dailyScore=getComprehensiveDailyScore(date);const totalScore=dailyScore.totalScore;// Color gradient based on total score (0-85 max possible) - Red to Yellow to Green\nif(totalScore===0)return'transparent';// No activity - blank (nothing logged)\nif(totalScore<=5)return'#ef4444';// Very low - red\nif(totalScore<=10)return'#f87171';// Low - light red\nif(totalScore<=15)return'#fbbf24';// Medium-low - yellow-orange\nif(totalScore<=20)return'#fde047';// Medium - yellow\nif(totalScore<=25)return'#fef08a';// Medium-high - light yellow\nif(totalScore<=30)return'#fef3c7';// High - very light yellow\nif(totalScore<=35)return'#d1fae5';// Very high - very light green\nif(totalScore<=40)return'#a7f3d0';// Excellent - light green\nif(totalScore<=45)return'#6ee7b7';// Outstanding - medium green\nif(totalScore<=50)return'#34d399';// Exceptional - green\nif(totalScore<=60)return'#10b981';// Amazing - emerald green\nif(totalScore<=70)return'#059669';// Incredible - dark green\nreturn'#047857';// Perfect - darkest green (best)\n};// Generate all days for the current year (January to current month)\nconst generateAllDays=()=>{console.log('🔍 generateAllDays function called!');const allDays=[];// Ensure startDate and endDate are valid Date objects\nif(!startDate||!(startDate instanceof Date)||isNaN(startDate.getTime())){console.error('❌ Invalid startDate in generateAllDays:',startDate);return[];}if(!endDate||!(endDate instanceof Date)||isNaN(endDate.getTime())){console.error('❌ Invalid endDate in generateAllDays:',endDate);return[];}const currentDateCopy=new Date(startDate.getTime());// Create a proper copy\nconsole.log(\"\\uD83D\\uDD0D Generating days from \".concat(startDate.toISOString(),\" (Jan 1st) to \").concat(endDate.toISOString(),\" (end of current month)\"));console.log(\"\\uD83D\\uDD0D mindfulnessCheckins count: \".concat(mindfulnessCheckins.length));let dayCount=0;while(currentDateCopy<=endDate){dayCount++;// Validate the current date\nif(isNaN(currentDateCopy.getTime())){console.error('❌ Invalid currentDateCopy detected:',currentDateCopy);break;}const dayDateStr=currentDateCopy.toLocaleDateString('en-CA');console.log(\"\\uD83D\\uDD0D Day \".concat(dayCount,\": Processing \").concat(dayDateStr));const dailyScore=getComprehensiveDailyScore(currentDateCopy);// Create a new Date object for the day data\nconst dayDate=new Date(currentDateCopy.getTime());allDays.push({date:dayDate,dailyScore,isToday:dayDate.toDateString()===new Date().toDateString()});// Check if we've reached today's date\nif(dayDate.toDateString()===new Date().toDateString()){console.log(\"\\uD83C\\uDFAF Found today's date: \".concat(dayDateStr));console.log(\"\\uD83C\\uDFAF Today's date object:\",dayDate);console.log(\"\\uD83C\\uDFAF Today's date string:\",dayDate.toDateString());console.log(\"\\uD83C\\uDFAF Current date string:\",new Date().toDateString());}// Move to next day\ncurrentDateCopy.setDate(currentDateCopy.getDate()+1);// Safety check to prevent infinite loops\nif(dayCount>400){console.error('❌ Loop limit exceeded, breaking');break;}}console.log(\"\\uD83D\\uDD0D Generated \".concat(allDays.length,\" days\"));console.log(\"\\uD83D\\uDD0D Sample days with scores:\",allDays.slice(0,5).map(day=>({date:day.date.toISOString().split('T')[0],score:day.mindfulnessScore})));return allDays;};// Group days by month\nconst groupDaysByMonth=allDays=>{const months=[];let currentMonth=null;let currentMonthDays=[];allDays.forEach(day=>{const monthKey=\"\".concat(day.date.getFullYear(),\"-\").concat(day.date.getMonth());if(monthKey!==currentMonth){if(currentMonthDays.length>0){months.push({month:new Date(currentMonthDays[0].date.getFullYear(),currentMonthDays[0].date.getMonth(),1),days:currentMonthDays});}currentMonth=monthKey;currentMonthDays=[day];}else{currentMonthDays.push(day);}});if(currentMonthDays.length>0){months.push({month:new Date(currentMonthDays[0].date.getFullYear(),currentMonthDays[0].date.getMonth(),1),days:currentMonthDays});}return months;};const allDays=generateAllDays();const months=groupDaysByMonth(allDays);const weekdays=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];// Debug logging\nconsole.log('MonthGrid Debug:',{startDate:startDate.toDateString(),currentDate:currentDate.toDateString(),allDaysCount:allDays.length,monthsCount:months.length,selectedDate:selectedDate.toDateString()});return/*#__PURE__*/_jsxs(\"div\",{className:\"w-full\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex flex-col gap-0.5 pt-4\",children:weekdays.map(day=>/*#__PURE__*/_jsx(\"div\",{className:\"h-2.5 text-xs text-[#94A3B8] font-medium w-6 text-center\",children:day==='Sun'||day==='Tue'||day==='Thu'||day==='Sat'?'':day},day))}),/*#__PURE__*/_jsx(\"div\",{className:\"flex gap-1\",children:months.map((monthData,monthIndex)=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-center mb-1\",children:/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-[#94A3B8] font-medium\",children:monthData.month.toLocaleDateString('en-US',{month:'short'})})}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-7 gap-0.5\",children:monthData.days.map((dayData,dayIndex)=>{const{date,dailyScore,isToday}=dayData;const backgroundColor=getDayColor(date);const{totalScore,breakdown}=dailyScore;const tooltipText=totalScore===0?\"\".concat(date.toLocaleDateString(),\"\\nNo activity logged for this day\"):\"\".concat(date.toLocaleDateString(),\"\\nTotal Score: \").concat(totalScore,\"/85\\n\\u2022 Mindfulness: \").concat(breakdown.mindfulness,\"/25\\n\\u2022 Goal Progress: \").concat(breakdown.goalProgress,\"/20\\n\\u2022 Habits: \").concat(breakdown.habitCompletion,\"/15\\n\\u2022 Meal Effects: \").concat(breakdown.mealEffects,\"/25\\n\\u2022 Impulse Penalty: \").concat(breakdown.impulseBuyPenalty);return/*#__PURE__*/_jsx(\"div\",{onClick:()=>onDateSelect&&onDateSelect(date),className:\"w-2.5 h-2.5 rounded-sm cursor-pointer transition-all duration-200 hover:scale-125 hover:ring-2 hover:ring-blue-400 \".concat(isToday?'ring-2 ring-blue-500 ring-offset-1':'',\" \").concat(totalScore===0?'border border-[#2A313A] bg-transparent':''),style:{backgroundColor},title:tooltipText},dayIndex);})})]},monthIndex))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs text-[#94A3B8]\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium mb-1\",children:\"Daily Activity Score (0-85)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-xs opacity-75\",children:\"Mindfulness (25) + Goals (20) + Habits (15) + Meals (25) - User-marked Impulse Buys (10)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-[#94A3B8]\",children:\"Worst\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-0.5\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-transparent rounded-sm border border-[#2A313A]\",title:\"No Activity (0)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#ef4444] rounded-sm border border-[#2A313A]\",title:\"Very Low (1-5)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#f87171] rounded-sm border border-[#2A313A]\",title:\"Low (6-10)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#fbbf24] rounded-sm border border-[#2A313A]\",title:\"Medium-Low (11-15)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#fde047] rounded-sm border border-[#2A313A]\",title:\"Medium (16-20)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#fef08a] rounded-sm border border-[#2A313A]\",title:\"Medium-High (21-25)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#fef3c7] rounded-sm border border-[#2A313A]\",title:\"High (26-30)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#d1fae5] rounded-sm border border-[#2A313A]\",title:\"Very High (31-35)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#a7f3d0] rounded-sm border border-[#2A313A]\",title:\"Excellent (36-40)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#6ee7b7] rounded-sm border border-[#2A313A]\",title:\"Outstanding (41-45)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#34d399] rounded-sm border border-[#2A313A]\",title:\"Exceptional (46-50)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#10b981] rounded-sm border border-[#2A313A]\",title:\"Amazing (51-60)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#059669] rounded-sm border border-[#2A313A]\",title:\"Incredible (61-70)\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-2.5 h-2.5 bg-[#047857] rounded-sm border border-[#2A313A]\",title:\"Best (71-85)\"})]}),/*#__PURE__*/_jsx(\"span\",{className:\"text-xs text-[#94A3B8]\",children:\"Best\"})]})]})]});}catch(error){console.error('MonthGrid component error:',error);return/*#__PURE__*/_jsx(\"div\",{className:\"w-full p-4 text-center text-red-500\",children:\"Error: MonthGrid component failed to render. Please check the console for details.\"});}};export default MonthGrid;","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","MonthGrid","_ref","selectedDate","habits","goals","mindfulnessCheckins","tasks","meals","expenses","onDateSelect","onMonthChange","safeHabits","Array","isArray","safeGoals","safeMindfulnessCheckins","safeTasks","safeMeals","safeExpenses","Date","isNaN","getTime","console","error","className","children","log","length","date","totalScore","currentDate","getFullYear","getMonth","getDate","toLocaleDateString","month","startDate","endDate","setHours","toISOString","year","getComprehensiveDailyScore","breakdown","mindfulness","goalProgress","habitCompletion","mealEffects","impulseBuyPenalty","dateStr","mindfulnessScore","getMindfulnessScoreForDate","goalProgressScore","getGoalProgressScoreForDate","habitCompletionScore","getHabitCompletionScoreForDate","mealEffectsScore","getMealEffectsScoreForDate","getImpulseBuyPenaltyForDate","Math","max","checkin","find","checkinDate","dimensions","Object","values","reduce","sum","dim","rating","score","completedTasksForGoals","filter","task","goalIds","status","taskDate","completedAt","updatedAt","min","completedCount","totalCount","forEach","habit","checkDate","isActive","_habit$checkins","checkins","c","completed","completionRate","round","dayMeals","meal","mealDate","ts","mealCount","_meal$computed","computed","effects","mealScore","positiveEffects","effect","_effects$effect","negativeEffects","_effects$effect2","averageScore","dayExpenses","expense","expenseDate","impulseExpenses","impulseBuy","penalty","amount","getDayColor","dailyScore","generateAllDays","allDays","currentDateCopy","concat","dayCount","dayDateStr","dayDate","push","isToday","toDateString","setDate","slice","map","day","split","groupDaysByMonth","months","currentMonth","currentMonthDays","monthKey","days","weekdays","allDaysCount","monthsCount","monthData","monthIndex","dayData","dayIndex","backgroundColor","tooltipText","onClick","style","title"],"sources":["/Users/priyas/Desktop/untangle-platform/src/components/ui/MonthGrid.js"],"sourcesContent":["import React from 'react';\n\nconst MonthGrid = ({ \n  selectedDate, \n  habits = [], \n  goals = [], \n  mindfulnessCheckins = [],\n  tasks = [],\n  meals = [],\n  expenses = [],\n  onDateSelect,\n  onMonthChange\n}) => {\n  // Ensure all props are arrays with fallbacks\n  const safeHabits = Array.isArray(habits) ? habits : [];\n  const safeGoals = Array.isArray(goals) ? goals : [];\n  const safeMindfulnessCheckins = Array.isArray(mindfulnessCheckins) ? mindfulnessCheckins : [];\n  const safeTasks = Array.isArray(tasks) ? tasks : [];\n  const safeMeals = Array.isArray(meals) ? meals : [];\n  const safeExpenses = Array.isArray(expenses) ? expenses : [];\n  try {\n    // Input validation to prevent React error #137\n    if (!selectedDate || !(selectedDate instanceof Date) || isNaN(selectedDate.getTime())) {\n      console.error('MonthGrid: Invalid selectedDate prop', selectedDate);\n      return (\n        <div className=\"w-full p-4 text-center text-red-500\">\n          Error: Invalid date provided to MonthGrid component\n        </div>\n      );\n    }\n\n    // Debug logging for data loading\n    console.log('MonthGrid: Data received:', {\n      habits: safeHabits.length,\n      goals: safeGoals.length,\n      mindfulnessCheckins: safeMindfulnessCheckins.length,\n      tasks: safeTasks.length,\n      meals: safeMeals.length,\n      expenses: safeExpenses.length\n    });\n\n    console.log('🔍 MonthGrid rendered with props:');\n    console.log('🔍 mindfulnessCheckins:', safeMindfulnessCheckins);\n    console.log('🔍 mindfulnessCheckins.length:', safeMindfulnessCheckins.length);\n    console.log('🔍 mindfulnessCheckins type:', typeof safeMindfulnessCheckins);\n    console.log('🔍 Is array:', Array.isArray(safeMindfulnessCheckins));\n    \n    if (safeMindfulnessCheckins.length > 0) {\n      console.log('🔍 First checkin:', safeMindfulnessCheckins[0]);\n      console.log('🔍 First checkin date:', safeMindfulnessCheckins[0].date);\n      console.log('🔍 First checkin totalScore:', safeMindfulnessCheckins[0].totalScore);\n    }\n\n    // Get the current date and calculate the start date (12 months ago)\n    const currentDate = new Date();\n    \n    // Validate current date\n    if (isNaN(currentDate.getTime())) {\n      console.error('❌ Invalid currentDate detected');\n      return (\n        <div className=\"w-full p-4 text-center text-red-500\">\n          Error: Invalid current date\n        </div>\n      );\n    }\n    \n    // Debug: Let's see exactly what we're working with\n    console.log('🔍 Raw date info:');\n    console.log('🔍 currentDate.getFullYear():', currentDate.getFullYear());\n    console.log('🔍 currentDate.getMonth():', currentDate.getMonth());\n    console.log('🔍 currentDate.getDate():', currentDate.getDate());\n    console.log('🔍 Month name:', currentDate.toLocaleDateString('en-US', { month: 'long' }));\n    console.log('🔍 Showing current year from January to current month');\n    \n    // Calculate start date to show current year from January to current month\n    // We want to show from January 1st of current year to current month\n    const startDate = new Date(currentDate.getFullYear(), 0, 1); // January 1st of current year\n    \n    // Validate startDate\n    if (isNaN(startDate.getTime())) {\n      console.error('❌ Invalid startDate calculated:', startDate);\n      return (\n        <div className=\"w-full p-4 text-center text-red-500\">\n          Error: Invalid start date calculation\n        </div>\n      );\n    }\n    \n    // Set end date to the last day of the current month\n    const endDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    endDate.setHours(23, 59, 59, 999);\n    \n    // Validate endDate\n    if (isNaN(endDate.getTime())) {\n      console.error('❌ Invalid endDate calculated:', endDate);\n      return (\n        <div className=\"w-full p-4 text-center text-red-500\">\n          Error: Invalid end date calculation\n        </div>\n      );\n    }\n    \n    console.log('🔍 Date calculations:');\n    console.log('🔍 currentDate:', currentDate);\n    console.log('🔍 currentDate.toISOString():', currentDate.toISOString());\n    console.log('🔍 startDate (Jan 1st):', startDate);\n    console.log('🔍 startDate.toISOString():', startDate.toISOString());\n    console.log('🔍 endDate (end of current month):', endDate);\n    console.log('🔍 endDate.toISOString():', endDate.toISOString());\n    console.log('🔍 startDate <= endDate:', startDate <= endDate);\n    \n    // Debug: Let's verify the month calculation\n    console.log('🔍 Month calculation debug:');\n    console.log('🔍 Showing months from January to current month');\n    console.log('🔍 Expected start month:', startDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' }));\n    console.log('🔍 Expected end month:', endDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' }));\n    \n    // Get comprehensive daily score for a specific date\n    const getComprehensiveDailyScore = (date) => {\n      // Validate date input\n      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {\n        console.error('getComprehensiveDailyScore: Invalid date input', date);\n        return {\n          totalScore: 0,\n          breakdown: {\n            mindfulness: 0,\n            goalProgress: 0,\n            habitCompletion: 0,\n            mealEffects: 0,\n            impulseBuyPenalty: 0\n          }\n        };\n      }\n\n      const dateStr = date.toLocaleDateString('en-CA'); // YYYY-MM-DD format\n      \n      // 1. Mindfulness Score (0-25 points)\n      const mindfulnessScore = getMindfulnessScoreForDate(date);\n      \n      // 2. Goal Progress Score (0-20 points)\n      const goalProgressScore = getGoalProgressScoreForDate(date);\n      \n      // 3. Habit Completion Score (0-15 points)\n      const habitCompletionScore = getHabitCompletionScoreForDate(date);\n      \n      // 4. Meal Effects Score (0-25 points)\n      const mealEffectsScore = getMealEffectsScoreForDate(date);\n      \n      // 5. Impulse Buy Penalty (0 to -10 points)\n      const impulseBuyPenalty = getImpulseBuyPenaltyForDate(date);\n      \n      const totalScore = Math.max(0, mindfulnessScore + goalProgressScore + habitCompletionScore + mealEffectsScore + impulseBuyPenalty);\n      \n      return {\n        totalScore,\n        breakdown: {\n          mindfulness: mindfulnessScore,\n          goalProgress: goalProgressScore,\n          habitCompletion: habitCompletionScore,\n          mealEffects: mealEffectsScore,\n          impulseBuyPenalty: impulseBuyPenalty\n        }\n      };\n    };\n\n    // Get mindfulness score for a specific date (0-25 points)\n    const getMindfulnessScoreForDate = (date) => {\n      const dateStr = date.toLocaleDateString('en-CA');\n      \n      const checkin = safeMindfulnessCheckins.find(checkin => {\n        if (!checkin || !checkin.date) return false;\n        const checkinDate = new Date(checkin.date).toLocaleDateString('en-CA');\n        return dateStr === checkinDate;\n      });\n\n      if (!checkin) return 0;\n      \n      // Calculate total score from dimensions (5 dimensions × 0-5 rating each = 0-25)\n      const dimensions = checkin.dimensions || {};\n      const totalScore = Object.values(dimensions).reduce((sum, dim) => {\n        return sum + (dim.rating || 0);\n      }, 0);\n      \n      return totalScore;\n    };\n\n    // Get goal progress score for a specific date (0-20 points)\n    const getGoalProgressScoreForDate = (date) => {\n      const dateStr = date.toLocaleDateString('en-CA');\n      let score = 0;\n      \n      // Check if any tasks for goals were completed on this date\n      const completedTasksForGoals = safeTasks.filter(task => {\n        if (!task.goalIds || task.goalIds.length === 0) return false;\n        if (task.status !== 'completed') return false;\n        \n        const taskDate = new Date(task.completedAt || task.updatedAt).toLocaleDateString('en-CA');\n        return taskDate === dateStr;\n      });\n      \n      // Score based on completed tasks (up to 20 points)\n      if (completedTasksForGoals.length > 0) {\n        // Base score for having any goal progress\n        score += 10;\n        \n        // Additional points for multiple completed tasks\n        if (completedTasksForGoals.length >= 2) score += 5;\n        if (completedTasksForGoals.length >= 3) score += 5;\n      }\n      \n      return Math.min(score, 20);\n    };\n\n    // Get habit completion score for a specific date (0-15 points)\n    const getHabitCompletionScoreForDate = (date) => {\n      const dateStr = date.toLocaleDateString('en-CA');\n      let completedCount = 0;\n      let totalCount = 0;\n      \n      safeHabits.forEach(habit => {\n        if (!habit || !habit.startDate || !habit.endDate) return;\n\n        const checkDate = new Date(date);\n        checkDate.setHours(0, 0, 0, 0);\n        \n        const startDate = new Date(habit.startDate);\n        startDate.setHours(0, 0, 0, 0);\n        \n        const endDate = new Date(habit.endDate);\n        endDate.setHours(23, 59, 59, 999);\n        \n        if (habit.isActive && checkDate >= startDate && checkDate <= endDate) {\n          totalCount++;\n          const checkin = habit.checkins?.find(c => {\n            const checkinDate = new Date(c.date).toLocaleDateString('en-CA');\n            return checkinDate === dateStr && c.completed;\n          });\n          if (checkin) completedCount++;\n        }\n      });\n      \n      if (totalCount === 0) return 0;\n      \n      const completionRate = completedCount / totalCount;\n      return Math.round(completionRate * 15); // 0-15 points based on completion rate\n    };\n\n    // Get meal effects score for a specific date (0-25 points)\n    const getMealEffectsScoreForDate = (date) => {\n      const dateStr = date.toLocaleDateString('en-CA');\n      const dayMeals = safeMeals.filter(meal => {\n        const mealDate = new Date(meal.ts).toLocaleDateString('en-CA');\n        return mealDate === dateStr;\n      });\n      \n      if (dayMeals.length === 0) return 0;\n      \n      let totalScore = 0;\n      let mealCount = 0;\n      \n      dayMeals.forEach(meal => {\n        if (!meal.computed?.effects) return;\n        \n        const effects = meal.computed.effects;\n        let mealScore = 0;\n        \n        // Positive effects (0-5 points each)\n        const positiveEffects = ['strength', 'antiInflammatory', 'immunity', 'gutFriendly', 'energizing'];\n        positiveEffects.forEach(effect => {\n          if (effects[effect]?.score) {\n            mealScore += Math.round(effects[effect].score / 2); // Convert 0-10 to 0-5\n          }\n        });\n        \n        // Negative effects (penalty)\n        const negativeEffects = ['inflammation', 'fatForming'];\n        negativeEffects.forEach(effect => {\n          if (effects[effect]?.score) {\n            mealScore -= Math.round(effects[effect].score / 2); // Convert 0-10 to 0-5 penalty\n          }\n        });\n        \n        totalScore += Math.max(0, mealScore); // Don't go below 0\n        mealCount++;\n      });\n      \n      // Average score per meal, capped at 5 points per meal\n      const averageScore = mealCount > 0 ? totalScore / mealCount : 0;\n      return Math.min(Math.round(averageScore * dayMeals.length), 25);\n    };\n\n    // Get impulse buy penalty for a specific date (0 to -10 points)\n    const getImpulseBuyPenaltyForDate = (date) => {\n      const dateStr = date.toLocaleDateString('en-CA');\n      \n      // Check for expenses that were explicitly marked as impulse buys by the user\n      const dayExpenses = safeExpenses.filter(expense => {\n        const expenseDate = new Date(expense.date).toLocaleDateString('en-CA');\n        return expenseDate === dateStr;\n      });\n      \n      if (dayExpenses.length === 0) return 0;\n      \n      // Only consider expenses explicitly marked as impulse buys by the user\n      const impulseExpenses = dayExpenses.filter(expense => \n        expense.impulseBuy === true\n      );\n      \n      if (impulseExpenses.length === 0) return 0;\n      \n      // Calculate penalty based on number and amount of impulse expenses\n      let penalty = 0;\n      impulseExpenses.forEach(expense => {\n        // Penalty based on amount (more expensive = more penalty)\n        if (expense.amount > 1000) penalty += 3;\n        else if (expense.amount > 500) penalty += 2;\n        else if (expense.amount > 100) penalty += 1;\n        else penalty += 0.5;\n      });\n      \n      return Math.min(penalty, 10); // Cap at 10 points penalty\n    };\n\n    // Get color based on comprehensive daily score\n    const getDayColor = (date) => {\n      // Validate date input\n      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {\n        console.error('getDayColor: Invalid date input', date);\n        return '#0f1419'; // Default dark color for invalid dates\n      }\n\n      const dailyScore = getComprehensiveDailyScore(date);\n      const totalScore = dailyScore.totalScore;\n      \n      // Color gradient based on total score (0-85 max possible) - Red to Yellow to Green\n      if (totalScore === 0) return 'transparent'; // No activity - blank (nothing logged)\n      if (totalScore <= 5) return '#ef4444'; // Very low - red\n      if (totalScore <= 10) return '#f87171'; // Low - light red\n      if (totalScore <= 15) return '#fbbf24'; // Medium-low - yellow-orange\n      if (totalScore <= 20) return '#fde047'; // Medium - yellow\n      if (totalScore <= 25) return '#fef08a'; // Medium-high - light yellow\n      if (totalScore <= 30) return '#fef3c7'; // High - very light yellow\n      if (totalScore <= 35) return '#d1fae5'; // Very high - very light green\n      if (totalScore <= 40) return '#a7f3d0'; // Excellent - light green\n      if (totalScore <= 45) return '#6ee7b7'; // Outstanding - medium green\n      if (totalScore <= 50) return '#34d399'; // Exceptional - green\n      if (totalScore <= 60) return '#10b981'; // Amazing - emerald green\n      if (totalScore <= 70) return '#059669'; // Incredible - dark green\n      return '#047857'; // Perfect - darkest green (best)\n    };\n\n    // Generate all days for the current year (January to current month)\n    const generateAllDays = () => {\n      console.log('🔍 generateAllDays function called!');\n      const allDays = [];\n      \n      // Ensure startDate and endDate are valid Date objects\n      if (!startDate || !(startDate instanceof Date) || isNaN(startDate.getTime())) {\n        console.error('❌ Invalid startDate in generateAllDays:', startDate);\n        return [];\n      }\n      \n      if (!endDate || !(endDate instanceof Date) || isNaN(endDate.getTime())) {\n        console.error('❌ Invalid endDate in generateAllDays:', endDate);\n        return [];\n      }\n      \n      const currentDateCopy = new Date(startDate.getTime()); // Create a proper copy\n      \n      console.log(`🔍 Generating days from ${startDate.toISOString()} (Jan 1st) to ${endDate.toISOString()} (end of current month)`);\n      console.log(`🔍 mindfulnessCheckins count: ${mindfulnessCheckins.length}`);\n      \n      let dayCount = 0;\n      while (currentDateCopy <= endDate) {\n        dayCount++;\n        \n        // Validate the current date\n        if (isNaN(currentDateCopy.getTime())) {\n          console.error('❌ Invalid currentDateCopy detected:', currentDateCopy);\n          break;\n        }\n        \n        const dayDateStr = currentDateCopy.toLocaleDateString('en-CA');\n        console.log(`🔍 Day ${dayCount}: Processing ${dayDateStr}`);\n        \n        const dailyScore = getComprehensiveDailyScore(currentDateCopy);\n        \n        // Create a new Date object for the day data\n        const dayDate = new Date(currentDateCopy.getTime());\n        \n        allDays.push({\n          date: dayDate,\n          dailyScore,\n          isToday: dayDate.toDateString() === new Date().toDateString()\n        });\n        \n        // Check if we've reached today's date\n        if (dayDate.toDateString() === new Date().toDateString()) {\n          console.log(`🎯 Found today's date: ${dayDateStr}`);\n          console.log(`🎯 Today's date object:`, dayDate);\n          console.log(`🎯 Today's date string:`, dayDate.toDateString());\n          console.log(`🎯 Current date string:`, new Date().toDateString());\n        }\n        \n        // Move to next day\n        currentDateCopy.setDate(currentDateCopy.getDate() + 1);\n        \n        // Safety check to prevent infinite loops\n        if (dayCount > 400) {\n          console.error('❌ Loop limit exceeded, breaking');\n          break;\n        }\n      }\n      \n      console.log(`🔍 Generated ${allDays.length} days`);\n      console.log(`🔍 Sample days with scores:`, allDays.slice(0, 5).map(day => ({\n        date: day.date.toISOString().split('T')[0],\n        score: day.mindfulnessScore\n      })));\n      \n      return allDays;\n    };\n\n    // Group days by month\n    const groupDaysByMonth = (allDays) => {\n      const months = [];\n      let currentMonth = null;\n      let currentMonthDays = [];\n      \n      allDays.forEach(day => {\n        const monthKey = `${day.date.getFullYear()}-${day.date.getMonth()}`;\n        \n        if (monthKey !== currentMonth) {\n          if (currentMonthDays.length > 0) {\n            months.push({\n              month: new Date(currentMonthDays[0].date.getFullYear(), currentMonthDays[0].date.getMonth(), 1),\n              days: currentMonthDays\n            });\n          }\n          currentMonth = monthKey;\n          currentMonthDays = [day];\n        } else {\n          currentMonthDays.push(day);\n        }\n      });\n      \n      if (currentMonthDays.length > 0) {\n        months.push({\n          month: new Date(currentMonthDays[0].date.getFullYear(), currentMonthDays[0].date.getMonth(), 1),\n          days: currentMonthDays\n        });\n      }\n      \n      return months;\n    };\n\n    const allDays = generateAllDays();\n    const months = groupDaysByMonth(allDays);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    \n    // Debug logging\n    console.log('MonthGrid Debug:', {\n      startDate: startDate.toDateString(),\n      currentDate: currentDate.toDateString(),\n      allDaysCount: allDays.length,\n      monthsCount: months.length,\n      selectedDate: selectedDate.toDateString()\n    });\n\n    return (\n      <div className=\"w-full\">\n\n        {/* GitHub-style Contribution Grid */}\n        <div className=\"flex gap-1\">\n          {/* Weekday Labels */}\n          <div className=\"flex flex-col gap-0.5 pt-4\">\n            {weekdays.map(day => (\n              <div key={day} className=\"h-2.5 text-xs text-[#94A3B8] font-medium w-6 text-center\">\n                {day === 'Sun' || day === 'Tue' || day === 'Thu' || day === 'Sat' ? '' : day}\n              </div>\n            ))}\n          </div>\n\n          {/* Months Grid */}\n          <div className=\"flex gap-1\">\n            {months.map((monthData, monthIndex) => (\n              <div key={monthIndex} className=\"flex flex-col\">\n                {/* Month Label */}\n                <div className=\"text-center mb-1\">\n                  <span className=\"text-xs text-[#94A3B8] font-medium\">\n                    {monthData.month.toLocaleDateString('en-US', { month: 'short' })}\n                  </span>\n                </div>\n                \n                {/* Days Grid for this month */}\n                <div className=\"grid grid-cols-7 gap-0.5\">\n                  {monthData.days.map((dayData, dayIndex) => {\n                    const { date, dailyScore, isToday } = dayData;\n                    const backgroundColor = getDayColor(date);\n                    const { totalScore, breakdown } = dailyScore;\n\n                    const tooltipText = totalScore === 0 \n                      ? `${date.toLocaleDateString()}\\nNo activity logged for this day`\n                      : `${date.toLocaleDateString()}\nTotal Score: ${totalScore}/85\n• Mindfulness: ${breakdown.mindfulness}/25\n• Goal Progress: ${breakdown.goalProgress}/20\n• Habits: ${breakdown.habitCompletion}/15\n• Meal Effects: ${breakdown.mealEffects}/25\n• Impulse Penalty: ${breakdown.impulseBuyPenalty}`;\n\n                    return (\n                      <div\n                        key={dayIndex}\n                        onClick={() => onDateSelect && onDateSelect(date)}\n                        className={`w-2.5 h-2.5 rounded-sm cursor-pointer transition-all duration-200 hover:scale-125 hover:ring-2 hover:ring-blue-400 ${\n                          isToday ? 'ring-2 ring-blue-500 ring-offset-1' : ''\n                        } ${totalScore === 0 ? 'border border-[#2A313A] bg-transparent' : ''}`}\n                        style={{ backgroundColor }}\n                        title={tooltipText}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Legend */}\n        <div className=\"mt-4 flex items-center justify-between\">\n          <div className=\"text-xs text-[#94A3B8]\">\n            <div className=\"font-medium mb-1\">Daily Activity Score (0-85)</div>\n            <div className=\"text-xs opacity-75\">\n              Mindfulness (25) + Goals (20) + Habits (15) + Meals (25) - User-marked Impulse Buys (10)\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-xs text-[#94A3B8]\">Worst</span>\n            <div className=\"flex gap-0.5\">\n              <div className=\"w-2.5 h-2.5 bg-transparent rounded-sm border border-[#2A313A]\" title=\"No Activity (0)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#ef4444] rounded-sm border border-[#2A313A]\" title=\"Very Low (1-5)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#f87171] rounded-sm border border-[#2A313A]\" title=\"Low (6-10)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#fbbf24] rounded-sm border border-[#2A313A]\" title=\"Medium-Low (11-15)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#fde047] rounded-sm border border-[#2A313A]\" title=\"Medium (16-20)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#fef08a] rounded-sm border border-[#2A313A]\" title=\"Medium-High (21-25)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#fef3c7] rounded-sm border border-[#2A313A]\" title=\"High (26-30)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#d1fae5] rounded-sm border border-[#2A313A]\" title=\"Very High (31-35)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#a7f3d0] rounded-sm border border-[#2A313A]\" title=\"Excellent (36-40)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#6ee7b7] rounded-sm border border-[#2A313A]\" title=\"Outstanding (41-45)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#34d399] rounded-sm border border-[#2A313A]\" title=\"Exceptional (46-50)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#10b981] rounded-sm border border-[#2A313A]\" title=\"Amazing (51-60)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#059669] rounded-sm border border-[#2A313A]\" title=\"Incredible (61-70)\"></div>\n              <div className=\"w-2.5 h-2.5 bg-[#047857] rounded-sm border border-[#2A313A]\" title=\"Best (71-85)\"></div>\n            </div>\n            <span className=\"text-xs text-[#94A3B8]\">Best</span>\n          </div>\n        </div>\n      </div>\n    );\n  } catch (error) {\n    console.error('MonthGrid component error:', error);\n    return (\n      <div className=\"w-full p-4 text-center text-red-500\">\n        Error: MonthGrid component failed to render. Please check the console for details.\n      </div>\n    );\n  }\n};\n\nexport default MonthGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}